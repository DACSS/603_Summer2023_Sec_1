{
  "hash": "c97166b3afdaf2ad0d374473bb530bfd",
  "result": {
    "markdown": "---\ntitle: \"Kruzlic Class Project 1\"\nauthor: \"Bryn Kruzlic\"\ndesription: \"First iteration of the class project\"\ndate: \"07/17/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - final project 1\n  - Qasim Abbas\n  - dplyr\n  \n---\n\n\n# These are the libraries being used in the following project. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(readr)\nlibrary(cluster)\nlibrary(dplyr)\nlibrary(AER)\n\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n# Read in file- top Spotify chart data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10s <- read_csv(\"C:/Users/Bryn Kruzlic/OneDrive/Desktop/MS_DACSS/DACSS603/top10s.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 603 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): title, artist, top genre dbl (12): ...1, year, bpm, nrgy, dnce, dB, live,\nval, dur, acous, spch, pop\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nView(top10s)\n```\n:::\n\n\n\n# Eliminate NA values within the data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10s %>% \n  select_all() %>% \n  filter(bpm == 0 |\n           nrgy == 0 |\n           dnce == 0 |\n           dB == 0 |\n           live == 0 |\n           dur == 0 |\n           spch == 0 |\n           pop  == 0 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 15\n   ...1 title artist `top genre`  year   bpm  nrgy  dnce    dB  live   val   dur\n  <dbl> <chr> <chr>  <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1    51 Hello Marti… big room     2010   128    98    67    -3    10    45   191\n2   139 Blow… P!nk   dance pop    2012   114    92    60    -3    25    75   256\n3   268 Not … Justi… dance pop    2014    86    73    59    -6    38    46   266\n4   363 L.A.… Fergie dance pop    2015   202    39    48    -8    26    27   193\n5   443 Mill… Adele  british so…  2016     0     0     0   -60     0     0   227\n# ℹ 3 more variables: acous <dbl>, spch <dbl>, pop <dbl>\n```\n:::\n\n```{.r .cell-code}\nsummary(top10s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ...1          title              artist           top genre        \n Min.   :  1.0   Length:603         Length:603         Length:603        \n 1st Qu.:151.5   Class :character   Class :character   Class :character  \n Median :302.0   Mode  :character   Mode  :character   Mode  :character  \n Mean   :302.0                                                           \n 3rd Qu.:452.5                                                           \n Max.   :603.0                                                           \n      year           bpm             nrgy           dnce      \n Min.   :2010   Min.   :  0.0   Min.   : 0.0   Min.   : 0.00  \n 1st Qu.:2013   1st Qu.:100.0   1st Qu.:61.0   1st Qu.:57.00  \n Median :2015   Median :120.0   Median :74.0   Median :66.00  \n Mean   :2015   Mean   :118.5   Mean   :70.5   Mean   :64.38  \n 3rd Qu.:2017   3rd Qu.:129.0   3rd Qu.:82.0   3rd Qu.:73.00  \n Max.   :2019   Max.   :206.0   Max.   :98.0   Max.   :97.00  \n       dB               live            val             dur       \n Min.   :-60.000   Min.   : 0.00   Min.   : 0.00   Min.   :134.0  \n 1st Qu.: -6.000   1st Qu.: 9.00   1st Qu.:35.00   1st Qu.:202.0  \n Median : -5.000   Median :12.00   Median :52.00   Median :221.0  \n Mean   : -5.579   Mean   :17.77   Mean   :52.23   Mean   :224.7  \n 3rd Qu.: -4.000   3rd Qu.:24.00   3rd Qu.:69.00   3rd Qu.:239.5  \n Max.   : -2.000   Max.   :74.00   Max.   :98.00   Max.   :424.0  \n     acous            spch             pop       \n Min.   : 0.00   Min.   : 0.000   Min.   : 0.00  \n 1st Qu.: 2.00   1st Qu.: 4.000   1st Qu.:60.00  \n Median : 6.00   Median : 5.000   Median :69.00  \n Mean   :14.33   Mean   : 8.358   Mean   :66.52  \n 3rd Qu.:17.00   3rd Qu.: 9.000   3rd Qu.:76.00  \n Max.   :99.00   Max.   :48.000   Max.   :99.00  \n```\n:::\n:::\n\n\n\n# Additional edit; song listed twice\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10s <- top10s %>% \n  filter(title != 'The Hills' | year != 2016)\n```\n:::\n\n\n\n#Fixing and grouping\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenre <- top10s[\"top genre\"]\n\nunique(top10s$'top genre')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"neo mellow\"                \"detroit hip hop\"          \n [3] \"dance pop\"                 \"pop\"                      \n [5] \"canadian pop\"              \"hip pop\"                  \n [7] \"barbadian pop\"             \"atl hip hop\"              \n [9] \"australian pop\"            \"indie pop\"                \n[11] \"art pop\"                   \"colombian pop\"            \n[13] \"big room\"                  \"british soul\"             \n[15] \"chicago rap\"               \"acoustic pop\"             \n[17] \"permanent wave\"            \"boy band\"                 \n[19] \"baroque pop\"               \"celtic rock\"              \n[21] \"electro\"                   \"complextro\"               \n[23] \"canadian hip hop\"          \"candy pop\"                \n[25] \"alaska indie\"              \"folk-pop\"                 \n[27] \"metropopolis\"              \"house\"                    \n[29] \"australian hip hop\"        \"electropop\"               \n[31] \"australian dance\"          \"hollywood\"                \n[33] \"canadian contemporary r&b\" \"irish singer-songwriter\"  \n[35] \"tropical house\"            \"belgian edm\"              \n[37] \"french indie pop\"          \"hip hop\"                  \n[39] \"danish pop\"                \"latin\"                    \n[41] \"canadian latin\"            \"electronic trap\"          \n[43] \"edm\"                       \"electro house\"            \n[45] \"downtempo\"                 \"brostep\"                  \n[47] \"contemporary country\"      \"moroccan pop\"             \n[49] \"escape room\"               \"alternative r&b\"          \n```\n:::\n\n```{.r .cell-code}\ntop10s <-top10s%>%separate((`top genre`),c(\"variable\",\"genre\"),extra='merge')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 97 rows [5, 12, 24, 55,\n58, 60, 65, 106, 108, 110, 114, 118, 119, 138, 148, 150, 153, 155, 163, 168,\n...].\n```\n:::\n\n```{.r .cell-code}\nother <- c(\"complextro\", \"downtempo\", \"brostep\", \"electro\", \"electronic\", \"escape\", \"folk-pop\", \"hollywood\", \"house\", \"irish\", \"permanent\", \"neo\", \"metropolis\", \"tropical\")\ntop10s$genre[top10s$variable %in% other] <- 'other'\ntop10s$genre[top10s$variable == 'hip'] <- 'hip hop'\ntop10s$genre[top10s$variable == 'latin'] <- 'latin'\ntop10s$genre[top10s$variable == 'boy'] <- 'pop'\ntop10s$genre[top10s$variable == 'french'] <- 'pop'\ntop10s$genre[top10s$variable == 'electropop'] <- 'pop'\ntop10s$genre[top10s$variable == 'pop'] <- 'pop'\ntop10s$genre[top10s$genre == 'contemporary r&b'] <- 'r&b'\ntop10s$genre[top10s$genre == 'room'] <- 'other'\ntable(top10s$genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncountry   dance     edm hip hop   indie   latin   other     pop     r&b     rap \n      1       6       2      20       1       5      46     493       9       1 \n   rock    soul \n      1      11 \n```\n:::\n\n```{.r .cell-code}\nmiss <- colSums(is.na(top10s))\nprint(miss[miss>0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngenre \n    6 \n```\n:::\n\n```{.r .cell-code}\ntop10s <-na.omit(top10s)\n```\n:::\n\n\n\n# Grouping and Analysis\n\n### Top Artists\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_artist <- top10s%>%arrange(desc(pop))%>%group_by(artist)\npop_artist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 596 × 16\n# Groups:   artist [181]\n    ...1 title   artist variable genre  year   bpm  nrgy  dnce    dB  live   val\n   <dbl> <chr>   <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1   573 \"Memor… Maroo… pop      pop    2019    91    32    76    -7     8    57\n 2   574 \"Lose … Selen… dance    pop    2019   102    34    51    -9    21     9\n 3   575 \"Someo… Lewis… pop      pop    2019   110    41    50    -6    11    45\n 4   576 \"Se\\xf… Shawn… canadian pop    2019   117    54    76    -6     9    75\n 5   577 \"How D… Sam S… pop      pop    2019   111    68    48    -5     8    35\n 6   578 \"South… Ed Sh… pop      pop    2019    98    62    86    -6     9    67\n 7   579 \"Tramp… SHAED  electro… pop    2019   127    46    62    -6    14    50\n 8   580 \"Happi… Marsh… brostep  other  2019   100    79    69    -3    17    67\n 9   581 \"Truth… Lizzo  escape   other  2019   158    62    72    -3    12    41\n10   582 \"Good … Lizzo  escape   other  2019    96    89    67    -3    74    48\n# ℹ 586 more rows\n# ℹ 4 more variables: dur <dbl>, acous <dbl>, spch <dbl>, pop <dbl>\n```\n:::\n\n```{.r .cell-code}\ntop_artist<-top10s%>%\n  group_by(`year`)%>%\n  count(artist)%>%\n  mutate(prop=n/sum(n))\n\nmost_popular_artist <- pop_artist%>%count(artist)%>%arrange(desc(n))\nmost_popular_artist%>%head(15)%>%ggplot(aes(x=reorder(artist,n),y=n))+geom_col(fill=\"skyblue\")+ggtitle(\"15 Most Popular Artist\")+coord_flip()\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Song duration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduration <-top10s%>%ggplot(aes(x=reorder(genre,dur),y=dur))+geom_boxplot(fill=\"limegreen\")+ggtitle(\"Song Duration\")+theme_light()\nduration\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nduration <- top10s %>% \n  ggplot(aes(x = reorder(genre, dur), y = dur)) +\n  geom_point() +\n  ggtitle(\"Song Duration\") +\n  xlab(\"Genre\") +\n  ylab(\"Duration\") +\n  theme_light() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1.2))\nduration\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbpm <- top10s%>%ggplot(aes(x=reorder(genre,bpm),y=bpm))+geom_boxplot(fill=\"violet\")+ggtitle(\"bpm Distribution\")+theme_light()+theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1.2))\nbpm\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n\n```{.r .cell-code}\nsummarized_data_genre <- top10s %>% \n  group_by(genre) %>% \n  summarize(avg_duration = mean(dur)) %>% \n  arrange(desc(avg_duration))\nView(summarized_data_genre)\n```\n:::\n\n\n\n### Most and least popular songs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_pop <-top10s%>%filter(pop>=60)%>%select(artist,pop,title,genre)%>%arrange(desc(pop))\nmax_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 448 × 4\n   artist          pop title                                               genre\n   <chr>         <dbl> <chr>                                               <chr>\n 1 Maroon 5         99 \"Memories\"                                          pop  \n 2 Selena Gomez     97 \"Lose You To Love Me\"                               pop  \n 3 Lewis Capaldi    96 \"Someone You Loved\"                                 pop  \n 4 Shawn Mendes     95 \"Se\\xf1orita\"                                       pop  \n 5 Sam Smith        93 \"How Do You Sleep?\"                                 pop  \n 6 Ed Sheeran       92 \"South of the Border (feat. Camila Cabello & Cardi… pop  \n 7 SHAED            92 \"Trampoline (with ZAYN)\"                            pop  \n 8 Marshmello       90 \"Happier\"                                           other\n 9 Lizzo            90 \"Truth Hurts\"                                       other\n10 Lizzo            90 \"Good as Hell (feat. Ariana Grande) - Remix\"        other\n# ℹ 438 more rows\n```\n:::\n\n```{.r .cell-code}\nmin_pop <-top10s%>%filter(pop<=59)%>%select(artist,pop,title,genre)%>%arrange(desc(pop))\nmin_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 148 × 4\n   artist                pop title                                         genre\n   <chr>               <dbl> <chr>                                         <chr>\n 1 Adam Lambert           59 If I Had You                                  pop  \n 2 The Black Eyed Peas    59 Rock That Body                                pop  \n 3 Britney Spears         59 Hold It Against Me                            pop  \n 4 Jennifer Lopez         59 I'm Into You                                  pop  \n 5 Pitbull                59 Don't Stop the Party (feat. TJR)              pop  \n 6 Alicia Keys            59 Girl On Fire (feat. Nicki Minaj) - Inferno V… hip …\n 7 Pharrell Williams      59 Come Get It Bae                               pop  \n 8 Lost Frequencies       59 Reality (feat. Janieck Devy) - Radio Edit     edm  \n 9 Fifth Harmony          59 Angel                                         pop  \n10 Little Mix             59 Touch (feat. Kid Ink)                         pop  \n# ℹ 138 more rows\n```\n:::\n:::\n\n\n\n### Artists with most number of songs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarized_songs_artist_1 <- top10s %>% \n  group_by(artist) %>% \n  summarize(no.of.songs = n()) %>% \n  arrange(desc(no.of.songs)) \n\nsummarized_songs_artist <- summarized_songs_artist_1 %>% \n  slice_max(no.of.songs,n=10)\nview(summarized_songs_artist)\n```\n:::\n\n\n\n# Plot PDF and CDF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar1_pdf <- prop.table(table(top10s$genre))\nvar1_cdf <- cumsum(var1_pdf)\nvar1_pdf_cdf <- data.frame(Genre = names(var1_pdf), Probability = var1_pdf, Cumulative = var1_cdf)\nprint(var1_pdf_cdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Genre Probability.Var1 Probability.Freq  Cumulative\ncountry country          country      0.001677852 0.001677852\ndance     dance            dance      0.010067114 0.011744966\nedm         edm              edm      0.003355705 0.015100671\nhip hop hip hop          hip hop      0.033557047 0.048657718\nindie     indie            indie      0.001677852 0.050335570\nlatin     latin            latin      0.008389262 0.058724832\nother     other            other      0.077181208 0.135906040\npop         pop              pop      0.827181208 0.963087248\nr&b         r&b              r&b      0.015100671 0.978187919\nrap         rap              rap      0.001677852 0.979865772\nrock       rock             rock      0.001677852 0.981543624\nsoul       soul             soul      0.018456376 1.000000000\n```\n:::\n\n```{.r .cell-code}\nvar2_pdf <- density(top10s$dur)\nvar2_pdf <- prop.table(table(top10s$dur))\nvar2_cdf <- cumsum(top10s$dur)\n\n\nvar2_pdf <- prop.table(table(top10s$dur))\nvar2_cdf <- cumsum(var2_pdf)\nvar2_pdf_cdf <- data.frame(Duration = unique(top10s$dur),\n                      Probability = var2_pdf,\n                      Cumulative = var2_cdf)\n\nprint(var2_pdf_cdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Duration Probability.Var1 Probability.Freq  Cumulative\n134      217              134      0.001677852 0.001677852\n148      263              148      0.001677852 0.003355705\n157      200              157      0.001677852 0.005033557\n158      295              158      0.001677852 0.006711409\n159      221              159      0.003355705 0.010067114\n160      214              160      0.001677852 0.011744966\n162      203              162      0.001677852 0.013422819\n164      225              164      0.001677852 0.015100671\n166      216              166      0.001677852 0.016778523\n169      235              169      0.003355705 0.020134228\n170      230              170      0.001677852 0.021812081\n171      213              171      0.003355705 0.025167785\n172      269              172      0.001677852 0.026845638\n173      202              173      0.003355705 0.030201342\n175      308              175      0.001677852 0.031879195\n176      274              176      0.003355705 0.035234899\n177      187              177      0.001677852 0.036912752\n178      284              178      0.003355705 0.040268456\n179      227              179      0.001677852 0.041946309\n180      215              180      0.001677852 0.043624161\n181      238              181      0.008389262 0.052013423\n182      212              182      0.006711409 0.058724832\n183      231              183      0.005033557 0.063758389\n184      228              184      0.010067114 0.073825503\n185      192              185      0.005033557 0.078859060\n186      172              186      0.008389262 0.087248322\n187      258              187      0.003355705 0.090604027\n188      249              188      0.006711409 0.097315436\n189      196              189      0.011744966 0.109060403\n190      264              190      0.005033557 0.114093960\n191      253              191      0.010067114 0.124161074\n192      185              192      0.013422819 0.137583893\n193      273              193      0.021812081 0.159395973\n194      251              194      0.005033557 0.164429530\n195      193              195      0.001677852 0.166107383\n196      257              196      0.008389262 0.174496644\n197      186              197      0.006711409 0.181208054\n198      220              198      0.013422819 0.194630872\n199      329              199      0.013422819 0.208053691\n200      191              200      0.018456376 0.226510067\n201      285              201      0.010067114 0.236577181\n202      252              202      0.020134228 0.256711409\n203      236              203      0.016778523 0.273489933\n204      201              204      0.011744966 0.285234899\n205      267              205      0.008389262 0.293624161\n206      223              206      0.015100671 0.308724832\n207      260              207      0.011744966 0.320469799\n208      379              208      0.015100671 0.335570470\n209      254              209      0.008389262 0.343959732\n210      262              210      0.011744966 0.355704698\n211      205              211      0.016778523 0.372483221\n212      219              212      0.008389262 0.380872483\n213      242              213      0.021812081 0.402684564\n214      208              214      0.010067114 0.412751678\n215      199              215      0.018456376 0.431208054\n216      321              216      0.013422819 0.444630872\n217      210              217      0.015100671 0.459731544\n218      307              218      0.011744966 0.471476510\n219      232              219      0.013422819 0.484899329\n220      197              220      0.015100671 0.500000000\n221      265              221      0.018456376 0.518456376\n222      229              222      0.010067114 0.528523490\n223      247              223      0.011744966 0.540268456\n224      255              224      0.013422819 0.553691275\n225      279              225      0.020134228 0.573825503\n226      245              226      0.006711409 0.580536913\n227      233              227      0.020134228 0.600671141\n228      188              228      0.018456376 0.619127517\n229      222              229      0.013422819 0.632550336\n230      248              230      0.023489933 0.656040268\n231      211              231      0.013422819 0.669463087\n232      206              232      0.010067114 0.679530201\n233      198              233      0.010067114 0.689597315\n234      277              234      0.010067114 0.699664430\n235      171              235      0.015100671 0.714765101\n236      243              236      0.016778523 0.731543624\n237      237              237      0.003355705 0.734899329\n238      256              238      0.008389262 0.743288591\n239      224              239      0.005033557 0.748322148\n240      209              240      0.005033557 0.753355705\n241      271              241      0.003355705 0.756711409\n242      184              242      0.008389262 0.765100671\n243      177              243      0.008389262 0.773489933\n244      183              244      0.005033557 0.778523490\n245      354              245      0.011744966 0.790268456\n246      272              246      0.003355705 0.793624161\n247      326              247      0.003355705 0.796979866\n248      280              248      0.008389262 0.805369128\n249      157              249      0.005033557 0.810402685\n250      241              250      0.005033557 0.815436242\n251      207              251      0.010067114 0.825503356\n252      424              252      0.006711409 0.832214765\n253      244              253      0.008389262 0.840604027\n254      353              254      0.001677852 0.842281879\n255      286              255      0.005033557 0.847315436\n256      259              256      0.003355705 0.850671141\n257      250              257      0.006711409 0.857382550\n258      270              258      0.005033557 0.862416107\n259      173              259      0.001677852 0.864093960\n260      190              260      0.006711409 0.870805369\n261      179              261      0.003355705 0.874161074\n262      194              262      0.003355705 0.877516779\n263      240              263      0.008389262 0.885906040\n264      246              264      0.008389262 0.894295302\n265      178              265      0.001677852 0.895973154\n266      204              266      0.001677852 0.897651007\n267      319              267      0.001677852 0.899328859\n268      226              268      0.001677852 0.901006711\n269      268              269      0.006711409 0.907718121\n270      323              270      0.003355705 0.911073826\n271      169              271      0.003355705 0.914429530\n272      160              272      0.006711409 0.921140940\n273      239              273      0.005033557 0.926174497\n274      266              274      0.005033557 0.931208054\n277      282              277      0.003355705 0.934563758\n279      234              279      0.006711409 0.941275168\n280      218              280      0.001677852 0.942953020\n282      293              282      0.003355705 0.946308725\n284      189              284      0.001677852 0.947986577\n285      134              285      0.006711409 0.954697987\n286      320              286      0.003355705 0.958053691\n289      159              289      0.001677852 0.959731544\n291      292              291      0.001677852 0.961409396\n292      309              292      0.001677852 0.963087248\n293      182              293      0.001677852 0.964765101\n294      181              294      0.001677852 0.966442953\n295      166              295      0.003355705 0.969798658\n304      170              304      0.001677852 0.971476510\n307      291              307      0.001677852 0.973154362\n308      403              308      0.001677852 0.974832215\n309      310              309      0.001677852 0.976510067\n310      289              310      0.001677852 0.978187919\n319      176              319      0.001677852 0.979865772\n320      261              320      0.001677852 0.981543624\n321      158              321      0.001677852 0.983221477\n323      180              323      0.001677852 0.984899329\n326      175              326      0.001677852 0.986577181\n329      341              329      0.003355705 0.989932886\n341      164              341      0.001677852 0.991610738\n353      195              353      0.001677852 0.993288591\n354      304              354      0.001677852 0.994966443\n379      294              379      0.001677852 0.996644295\n403      148              403      0.001677852 0.998322148\n424      162              424      0.001677852 1.000000000\n```\n:::\n:::\n\n\n\n# Variable defining\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_2 <- top10s %>% \n  group_by(genre) %>% \n  summarize(avg_duration = mean(dur)) %>% \n  arrange(desc(avg_duration))\nView(variable_2)\n\ncolnames(variable_2) <- c(\"Song Genre\", \"Average Song Duration\")\nview(variable_2)\n\nmean(top10s$dur)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 224.745\n```\n:::\n\n```{.r .cell-code}\nsd(top10s$dur)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 34.26896\n```\n:::\n:::\n\n\n\n# Standard errors and Confidence intervals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstandard_errors <- aggregate(dur ~ genre, data = top10s, FUN = function(x) sd(x) / sqrt(length(x)))\nsufficient_observations <- aggregate(dur ~ genre, data = top10s, FUN = function(x) length(x) >= 2)\n\n\ngenre_proportions <- prop.table(table(top10s$genre))\ngenre_sample_sizes <- as.integer(table(top10s$genre))\n```\n:::\n\n\n\n# Confidence intervals using the binom.test() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfidence_intervals <- lapply(names(genre_proportions), function(g) {\n  x <- as.integer(genre_proportions[g] * genre_sample_sizes[g])\n  n <- genre_sample_sizes[g]\n  conf_int <- binom.test(x, n)$conf.int\n  data.frame(genre = g, conf_int)\n})\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in binom.test(x, n): 'x' must be nonnegative and integer\n```\n:::\n\n```{.r .cell-code}\nconfidence_intervals <- do.call(rbind, confidence_intervals)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in do.call(rbind, confidence_intervals): object 'confidence_intervals' not found\n```\n:::\n\n```{.r .cell-code}\nprint(confidence_intervals)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(confidence_intervals): object 'confidence_intervals' not found\n```\n:::\n:::\n\n\n\n# Generating a plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_duration <- aggregate(dur ~ genre, data = top10s, FUN = mean)\nbarplot(average_duration$dur, names.arg = average_duration$genre, xlab = \"Genre\", ylab = \"Duration\", main = \"Average Duration by Genre\", col = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n# Regression analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10s$dur <- as.numeric(top10s$dur)\nmissing_values <- is.na(top10s$dur)\nsubset_data <- top10s[!missing_values, ]\n\n\nbarplot(table(top10s$genre, useNA = \"ifany\"), beside = TRUE, col = \"lightgray\", xlab = \"Genre\", ylab = \"Count\", main = \"Top 10s - Genre Distribution\")\n\n\nboxplot(dur ~ genre, data = top10s, col = \"maroon\", xlab = \"Genre\", ylab = \"Duration\", abline(h = median(top10s$dur), col = \"blue\", lwd = 2, lty = 2), main = \"Top 10s - Duration by Genre\")\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\nmodel <- lm(dur ~ genre, data = top10s)\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = dur ~ genre, data = top10s)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-88.789 -21.789  -3.789  14.053 201.211 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    196.00      32.75   5.985 3.78e-09 ***\ngenredance      47.00      35.37   1.329   0.1845    \ngenreedm       -37.50      40.11  -0.935   0.3502    \ngenrehip hop    62.70      33.56   1.868   0.0622 .  \ngenreindie      54.00      46.31   1.166   0.2441    \ngenrelatin      18.60      35.87   0.518   0.6043    \ngenreother      27.04      33.10   0.817   0.4143    \ngenrepop        26.79      32.78   0.817   0.4141    \ngenrer&b        25.67      34.52   0.744   0.4575    \ngenrerap       183.00      46.31   3.951 8.72e-05 ***\ngenrerock        7.00      46.31   0.151   0.8799    \ngenresoul       59.27      34.20   1.733   0.0836 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 32.75 on 584 degrees of freedom\nMultiple R-squared:  0.1037,\tAdjusted R-squared:  0.08678 \nF-statistic:  6.14 on 11 and 584 DF,  p-value: 1.396e-09\n```\n:::\n\n```{.r .cell-code}\nplot(top10s$genre, top10s$dur)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in xy.coords(x, y, xlabel, ylabel, log): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in min(x): no non-missing arguments to min; returning Inf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in max(x): no non-missing arguments to max; returning -Inf\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in plot.window(...): need finite 'xlim' values\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n:::\n\n\n# Correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrgy_dnce <-top10s%>%ggplot(aes(x=nrgy,y=dnce))+geom_point()+ggtitle(\"Energy/Danceability\")+theme_light()+geom_smooth(se=FALSE)\nnrgy_dnce\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$nrgy, top10s$dnce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1666149\n```\n:::\n\n```{.r .cell-code}\nval_nrgy <-top10s%>%ggplot(aes(x=val,y=nrgy))+geom_point()+ggtitle(\"Positivity/Energy\")+theme_light()+geom_smooth(se=FALSE)\nval_nrgy\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$val, top10s$nrgy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4109696\n```\n:::\n\n```{.r .cell-code}\nbpm_dnce <-top10s%>%ggplot(aes(x=bpm,y=dnce))+geom_point()+ggtitle(\"BPM/Danceability\")+theme_light()+geom_smooth(se=FALSE)\nbpm_dnce\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$bpm, top10s$dnce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1322216\n```\n:::\n\n```{.r .cell-code}\nbpm_pop <- top10s%>%ggplot(aes(x=bpm,y=pop))+geom_point()+ggtitle(\"BPM/Popularity\")+theme_minimal()+geom_smooth(se=FALSE)\nbpm_pop\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project1_files/figure-html/unnamed-chunk-16-4.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$bpm, top10s$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02314881\n```\n:::\n:::\n",
    "supporting": [
      "KruzlicClass_Project1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}