{
  "hash": "640c730bbdf2f617b3250f5148a8f973",
  "result": {
    "markdown": "---\ntitle: \"Kruzlic Class Project 2\"\nauthor: \"Bryn Kruzlic\"\ndesription: \"Second iteration of the class project\"\ndate: \"08/18/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - final project 2\n  - Qasim Abbas\n  - dplyr\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n# These are the libraries being used in the following project. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(readr)\nlibrary(cluster)\nlibrary(dplyr)\nlibrary(AER)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'AER' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: car\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'car' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: carData\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'carData' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'car'\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\nThe following object is masked from 'package:purrr':\n\n    some\n\nLoading required package: lmtest\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'lmtest' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: zoo\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'zoo' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nLoading required package: sandwich\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sandwich' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: survival\n```\n:::\n\n```{.r .cell-code}\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'caret' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n\nAttaching package: 'caret'\n\nThe following object is masked from 'package:survival':\n\n    cluster\n\nThe following object is masked from 'package:purrr':\n\n    lift\n```\n:::\n\n```{.r .cell-code}\nlibrary(dummy)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ndummy 0.1.3\ndummyNews()\n```\n:::\n\n```{.r .cell-code}\nlibrary(stargazer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nPlease cite as: \n\n Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables.\n R package version 5.2.3. https://CRAN.R-project.org/package=stargazer \n```\n:::\n\n```{.r .cell-code}\nlibrary(glmnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'glmnet' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nLoaded glmnet 4.1-7\n```\n:::\n\n```{.r .cell-code}\nlibrary(car)\nlibrary(lmtest)\nlibrary(sandwich)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n# Cleaning up the data\n\n##### Unfortunately, this dataset does contain a fair amount of missing data in addition to more measures of music than we need. For this project, we are only focused on genre, dur (duration) and pop (popularity) when it comes to the Top Spotify charting songs from 2010 to 2019. The below code features the cleaning process, merging together different subgenres into one 'umbrella' genre, eliminating repeat values and omitting NAs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in dataset\n\ntop10s <- read_csv(\"C:/Users/Bryn Kruzlic/OneDrive/Desktop/MS_DACSS/DACSS603/top10s.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 603 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): title, artist, top genre dbl (12): ...1, year, bpm, nrgy, dnce, dB, live,\nval, dur, acous, spch, pop\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nView(top10s)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtering NAs from the dataset\n\ntop10s %>% \n  select_all() %>% \n  filter(bpm == 0 |\n           nrgy == 0 |\n           dnce == 0 |\n           dB == 0 |\n           live == 0 |\n           dur == 0 |\n           spch == 0 |\n           pop  == 0 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 15\n   ...1 title artist `top genre`  year   bpm  nrgy  dnce    dB  live   val   dur\n  <dbl> <chr> <chr>  <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1    51 Hello Marti… big room     2010   128    98    67    -3    10    45   191\n2   139 Blow… P!nk   dance pop    2012   114    92    60    -3    25    75   256\n3   268 Not … Justi… dance pop    2014    86    73    59    -6    38    46   266\n4   363 L.A.… Fergie dance pop    2015   202    39    48    -8    26    27   193\n5   443 Mill… Adele  british so…  2016     0     0     0   -60     0     0   227\n# ℹ 3 more variables: acous <dbl>, spch <dbl>, pop <dbl>\n```\n:::\n\n```{.r .cell-code}\nsummary(top10s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ...1          title              artist           top genre        \n Min.   :  1.0   Length:603         Length:603         Length:603        \n 1st Qu.:151.5   Class :character   Class :character   Class :character  \n Median :302.0   Mode  :character   Mode  :character   Mode  :character  \n Mean   :302.0                                                           \n 3rd Qu.:452.5                                                           \n Max.   :603.0                                                           \n      year           bpm             nrgy           dnce      \n Min.   :2010   Min.   :  0.0   Min.   : 0.0   Min.   : 0.00  \n 1st Qu.:2013   1st Qu.:100.0   1st Qu.:61.0   1st Qu.:57.00  \n Median :2015   Median :120.0   Median :74.0   Median :66.00  \n Mean   :2015   Mean   :118.5   Mean   :70.5   Mean   :64.38  \n 3rd Qu.:2017   3rd Qu.:129.0   3rd Qu.:82.0   3rd Qu.:73.00  \n Max.   :2019   Max.   :206.0   Max.   :98.0   Max.   :97.00  \n       dB               live            val             dur       \n Min.   :-60.000   Min.   : 0.00   Min.   : 0.00   Min.   :134.0  \n 1st Qu.: -6.000   1st Qu.: 9.00   1st Qu.:35.00   1st Qu.:202.0  \n Median : -5.000   Median :12.00   Median :52.00   Median :221.0  \n Mean   : -5.579   Mean   :17.77   Mean   :52.23   Mean   :224.7  \n 3rd Qu.: -4.000   3rd Qu.:24.00   3rd Qu.:69.00   3rd Qu.:239.5  \n Max.   : -2.000   Max.   :74.00   Max.   :98.00   Max.   :424.0  \n     acous            spch             pop       \n Min.   : 0.00   Min.   : 0.000   Min.   : 0.00  \n 1st Qu.: 2.00   1st Qu.: 4.000   1st Qu.:60.00  \n Median : 6.00   Median : 5.000   Median :69.00  \n Mean   :14.33   Mean   : 8.358   Mean   :66.52  \n 3rd Qu.:17.00   3rd Qu.: 9.000   3rd Qu.:76.00  \n Max.   :99.00   Max.   :48.000   Max.   :99.00  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Repeated in the chart due to seperate releases\n\ntop10s <- top10s %>% \n  filter(title != 'The Hills' | year != 2016)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merging subgenres together for more cohesion\n\ngenre <- top10s[\"top genre\"]\n\nunique(top10s$'top genre')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"neo mellow\"                \"detroit hip hop\"          \n [3] \"dance pop\"                 \"pop\"                      \n [5] \"canadian pop\"              \"hip pop\"                  \n [7] \"barbadian pop\"             \"atl hip hop\"              \n [9] \"australian pop\"            \"indie pop\"                \n[11] \"art pop\"                   \"colombian pop\"            \n[13] \"big room\"                  \"british soul\"             \n[15] \"chicago rap\"               \"acoustic pop\"             \n[17] \"permanent wave\"            \"boy band\"                 \n[19] \"baroque pop\"               \"celtic rock\"              \n[21] \"electro\"                   \"complextro\"               \n[23] \"canadian hip hop\"          \"candy pop\"                \n[25] \"alaska indie\"              \"folk-pop\"                 \n[27] \"metropopolis\"              \"house\"                    \n[29] \"australian hip hop\"        \"electropop\"               \n[31] \"australian dance\"          \"hollywood\"                \n[33] \"canadian contemporary r&b\" \"irish singer-songwriter\"  \n[35] \"tropical house\"            \"belgian edm\"              \n[37] \"french indie pop\"          \"hip hop\"                  \n[39] \"danish pop\"                \"latin\"                    \n[41] \"canadian latin\"            \"electronic trap\"          \n[43] \"edm\"                       \"electro house\"            \n[45] \"downtempo\"                 \"brostep\"                  \n[47] \"contemporary country\"      \"moroccan pop\"             \n[49] \"escape room\"               \"alternative r&b\"          \n```\n:::\n\n```{.r .cell-code}\ntop10s <-top10s%>%separate((`top genre`),c(\"variable\",\"genre\"),extra='merge')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 97 rows [5, 12, 24, 55,\n58, 60, 65, 106, 108, 110, 114, 118, 119, 138, 148, 150, 153, 155, 163, 168,\n...].\n```\n:::\n\n```{.r .cell-code}\nother <- c(\"complextro\", \"downtempo\", \"brostep\", \"electro\", \"electronic\", \"escape\", \"folk-pop\", \"hollywood\", \"house\", \"irish\", \"permanent\", \"neo\", \"metropolis\", \"tropical\")\ntop10s$genre[top10s$variable %in% other] <- 'other'\ntop10s$genre[top10s$variable == 'hip'] <- 'hip hop'\ntop10s$genre[top10s$variable == 'latin'] <- 'latin'\ntop10s$genre[top10s$variable == 'boy'] <- 'pop'\ntop10s$genre[top10s$variable == 'french'] <- 'pop'\ntop10s$genre[top10s$variable == 'electropop'] <- 'pop'\ntop10s$genre[top10s$variable == 'pop'] <- 'pop'\ntop10s$genre[top10s$genre == 'contemporary r&b'] <- 'r&b'\ntop10s$genre[top10s$genre == 'room'] <- 'other'\ntable(top10s$genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ncountry   dance     edm hip hop   indie   latin   other     pop     r&b     rap \n      1       6       2      20       1       5      46     493       9       1 \n   rock    soul \n      1      11 \n```\n:::\n\n```{.r .cell-code}\nmiss <- colSums(is.na(top10s))\nprint(miss[miss>0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngenre \n    6 \n```\n:::\n\n```{.r .cell-code}\ntop10s <-na.omit(top10s)\n```\n:::\n\n\n# Grouping and Analysis- Defining and Representing Variables\n\n### *Top Artists*\n\n##### This below chart represents the artists with the highest number of charting songs between 2010 and 2019. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_artist <- top10s%>%arrange(desc(pop))%>%group_by(artist)\npop_artist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 596 × 16\n# Groups:   artist [181]\n    ...1 title   artist variable genre  year   bpm  nrgy  dnce    dB  live   val\n   <dbl> <chr>   <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1   573 \"Memor… Maroo… pop      pop    2019    91    32    76    -7     8    57\n 2   574 \"Lose … Selen… dance    pop    2019   102    34    51    -9    21     9\n 3   575 \"Someo… Lewis… pop      pop    2019   110    41    50    -6    11    45\n 4   576 \"Se\\xf… Shawn… canadian pop    2019   117    54    76    -6     9    75\n 5   577 \"How D… Sam S… pop      pop    2019   111    68    48    -5     8    35\n 6   578 \"South… Ed Sh… pop      pop    2019    98    62    86    -6     9    67\n 7   579 \"Tramp… SHAED  electro… pop    2019   127    46    62    -6    14    50\n 8   580 \"Happi… Marsh… brostep  other  2019   100    79    69    -3    17    67\n 9   581 \"Truth… Lizzo  escape   other  2019   158    62    72    -3    12    41\n10   582 \"Good … Lizzo  escape   other  2019    96    89    67    -3    74    48\n# ℹ 586 more rows\n# ℹ 4 more variables: dur <dbl>, acous <dbl>, spch <dbl>, pop <dbl>\n```\n:::\n\n```{.r .cell-code}\ntop_artist<-top10s%>%\n  group_by(`year`)%>%\n  count(artist)%>%\n  mutate(prop=n/sum(n))\n\nmost_popular_artist <- top10s %>% \n  group_by(artist) %>% \n  summarize(no.of.songs = n()) %>% \n  arrange(desc(no.of.songs)) \n\nsummarized_songs_artist <- most_popular_artist %>% \n  slice_max(no.of.songs,n=15)\nview(summarized_songs_artist)\n\nmost_popular_artist <- pop_artist%>%count(artist)%>%arrange(desc(n))\nmost_popular_artist%>%head(15)%>%ggplot(aes(x=reorder(artist,n),y=n))+geom_col(fill=\"skyblue\")+ggtitle(\"15 Most Popular Artists\")+coord_flip()\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### *Song Duration*\n\n##### This below chart represents the average duration of songs by genre. Not surprisingly, the majority of top charting Spotify songs are in Pop, with most of the songs averaging between 200 and 300 seconds. This means that the majority of charting Pop songs range from 3.5 to 5 minutes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nduration <-top10s%>%ggplot(aes(x=reorder(genre,dur),y=dur))+geom_boxplot(fill=\"limegreen\")+ggtitle(\"Song Duration\")+theme_light()\nduration\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nduration <- top10s %>% \n  ggplot(aes(x = reorder(genre, dur), y = dur)) +\n  geom_point() +\n  ggtitle(\"Song Duration\") +\n  xlab(\"Genre\") +\n  ylab(\"Duration\") +\n  theme_light() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1.2)) +\n  geom_point(color = \"darkgreen\")\nduration\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\nsummarized_data_genre <- top10s %>% \n  group_by(genre) %>% \n  summarize(avg_duration = mean(dur)) %>% \n  arrange(desc(avg_duration))\nView(summarized_data_genre)\n\ncolnames(summarized_data_genre) <- c(\"Song Genre\", \"Average Song Duration\")\nview(dur_genre)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in view(dur_genre): object 'dur_genre' not found\n```\n:::\n:::\n\n\n### *Most and Least Popular Songs*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_pop <-top10s%>%filter(pop>=60)%>%select(artist,pop,title,genre)%>%arrange(desc(pop))\nmax_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 448 × 4\n   artist          pop title                                               genre\n   <chr>         <dbl> <chr>                                               <chr>\n 1 Maroon 5         99 \"Memories\"                                          pop  \n 2 Selena Gomez     97 \"Lose You To Love Me\"                               pop  \n 3 Lewis Capaldi    96 \"Someone You Loved\"                                 pop  \n 4 Shawn Mendes     95 \"Se\\xf1orita\"                                       pop  \n 5 Sam Smith        93 \"How Do You Sleep?\"                                 pop  \n 6 Ed Sheeran       92 \"South of the Border (feat. Camila Cabello & Cardi… pop  \n 7 SHAED            92 \"Trampoline (with ZAYN)\"                            pop  \n 8 Marshmello       90 \"Happier\"                                           other\n 9 Lizzo            90 \"Truth Hurts\"                                       other\n10 Lizzo            90 \"Good as Hell (feat. Ariana Grande) - Remix\"        other\n# ℹ 438 more rows\n```\n:::\n\n```{.r .cell-code}\nmin_pop <-top10s%>%filter(pop<=59)%>%select(artist,pop,title,genre)%>%arrange(desc(pop))\nmin_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 148 × 4\n   artist                pop title                                         genre\n   <chr>               <dbl> <chr>                                         <chr>\n 1 Adam Lambert           59 If I Had You                                  pop  \n 2 The Black Eyed Peas    59 Rock That Body                                pop  \n 3 Britney Spears         59 Hold It Against Me                            pop  \n 4 Jennifer Lopez         59 I'm Into You                                  pop  \n 5 Pitbull                59 Don't Stop the Party (feat. TJR)              pop  \n 6 Alicia Keys            59 Girl On Fire (feat. Nicki Minaj) - Inferno V… hip …\n 7 Pharrell Williams      59 Come Get It Bae                               pop  \n 8 Lost Frequencies       59 Reality (feat. Janieck Devy) - Radio Edit     edm  \n 9 Fifth Harmony          59 Angel                                         pop  \n10 Little Mix             59 Touch (feat. Kid Ink)                         pop  \n# ℹ 138 more rows\n```\n:::\n\n```{.r .cell-code}\nmax_pop_threshold <- quantile(top10s$pop, 0.9)\nmin_pop_threshold <- quantile(top10s$pop, 0.1)\n\nggplot(top10s, aes(x = genre, y = pop, color = ifelse(pop >= max_pop_threshold, \"Max Popularity\", ifelse(pop <= min_pop_threshold, \"Min Popularity\", \"Intermediate\")))) +\n  geom_point() +\n  labs(x = \"Song Genre\", y = \"Popularity\", color = \"Popularity Level by Genre\") +\n  scale_color_manual(values = c(\"Max Popularity\" = \"green\", \"Min Popularity\" = \"red\", \"Intermediate\" = \"blue\")) +\n  theme_minimal() +\n  scale_x_discrete(expand = c(0.5, 0.5)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### *Plot PDF and CDF*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar1_pdf <- prop.table(table(top10s$genre))\nvar1_cdf <- cumsum(var1_pdf)\nvar1_pdf_cdf <- data.frame(Genre = names(var1_pdf), Probability = var1_pdf, Cumulative = var1_cdf)\nprint(var1_pdf_cdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Genre Probability.Var1 Probability.Freq  Cumulative\ncountry country          country      0.001677852 0.001677852\ndance     dance            dance      0.010067114 0.011744966\nedm         edm              edm      0.003355705 0.015100671\nhip hop hip hop          hip hop      0.033557047 0.048657718\nindie     indie            indie      0.001677852 0.050335570\nlatin     latin            latin      0.008389262 0.058724832\nother     other            other      0.077181208 0.135906040\npop         pop              pop      0.827181208 0.963087248\nr&b         r&b              r&b      0.015100671 0.978187919\nrap         rap              rap      0.001677852 0.979865772\nrock       rock             rock      0.001677852 0.981543624\nsoul       soul             soul      0.018456376 1.000000000\n```\n:::\n\n```{.r .cell-code}\nvar2_pdf <- density(top10s$dur)\nvar2_pdf <- prop.table(table(top10s$dur))\nvar2_cdf <- cumsum(top10s$dur)\n\n\nvar2_pdf <- prop.table(table(top10s$dur))\nvar2_cdf <- cumsum(var2_pdf)\nvar2_pdf_cdf <- data.frame(Duration = unique(top10s$dur),\n                      Probability = var2_pdf,\n                      Cumulative = var2_cdf)\n\ntibble(var2_pdf_cdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 × 4\n   Duration Probability.Var1 Probability.Freq Cumulative\n      <dbl> <fct>                       <dbl>      <dbl>\n 1      217 134                       0.00168    0.00168\n 2      263 148                       0.00168    0.00336\n 3      200 157                       0.00168    0.00503\n 4      295 158                       0.00168    0.00671\n 5      221 159                       0.00336    0.0101 \n 6      214 160                       0.00168    0.0117 \n 7      203 162                       0.00168    0.0134 \n 8      225 164                       0.00168    0.0151 \n 9      216 166                       0.00168    0.0168 \n10      235 169                       0.00336    0.0201 \n# ℹ 134 more rows\n```\n:::\n:::\n\n\n##### PDF or probability density function and CDF or cumulative distribution function can help us understand the likelihood of a random variable taking on a particular value. In the example of Spotify chart data, the PDF can provide insight on how frequent these values may appear and the CDF can help us understand how these specific features can impact a songs' relative popularity and performance. \n\n# Variable Defining and Redefining\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# naming the variables\n\ngenre_mapping <- unique(top10s$genre)\nvariable_1 <- as.numeric(factor(top10s$genre, levels = genre_mapping))\nview(variable_1) # genre of the popular songs\n\nvariable_2 <- top10s$dur # duration of the popular songs \n\nvariable_3 <- top10s$pop # popularity score of songs; used for omitted variable bias\n\ntop10s$variable_1 <- variable_1\ntop10s$variable_2 <- variable_2\n\n# mean and standard deviations\n\nmean(variable_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.092282\n```\n:::\n\n```{.r .cell-code}\nsd(variable_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.427182\n```\n:::\n\n```{.r .cell-code}\nmean(variable_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 224.745\n```\n:::\n\n```{.r .cell-code}\nsd(variable_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 34.26896\n```\n:::\n\n```{.r .cell-code}\nmean(variable_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 66.38255\n```\n:::\n\n```{.r .cell-code}\nsd(variable_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14.53045\n```\n:::\n:::\n\n\n### *Standard Errors*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstandard_errors <- aggregate(dur ~ genre, data = top10s, FUN = function(x) sd(x) / sqrt(length(x)))\nsufficient_observations <- aggregate(dur ~ genre, data = top10s, FUN = function(x) length(x) >= 2)\n\n\ngenre_proportions <- prop.table(table(top10s$genre))\ngenre_sample_sizes <- as.integer(table(top10s$genre))\n```\n:::\n\n\n\n### *Generating Plots*\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_duration <- aggregate(dur ~ genre, data = top10s, FUN = mean)\nbarplot(average_duration$dur, names.arg = average_duration$genre, xlab = \"Genre\", ylab = \"Duration\", main = \"Average Duration by Genre\", col = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n# Regression Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10s$dur <- as.numeric(top10s$dur)\nmissing_values <- is.na(top10s$dur)\nsubset_data <- top10s[!missing_values, ]\n\n\nbarplot(table(top10s$genre, useNA = \"ifany\"), beside = TRUE, col = \"lightgray\", xlab = \"Genre\", ylab = \"Count\", main = \"Top 10s - Genre Distribution\")\n\n\nboxplot(dur ~ genre, data = top10s, col = \"maroon\", xlab = \"Genre\", ylab = \"Duration\", abline(h = median(top10s$dur), col = \"blue\", lwd = 2, lty = 2), main = \"Top 10s - Duration by Genre\")\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n# Correlations\n\n##### The graphs below will allow us to see the correlation between specific variables within the dataset. For the purpose of our research, only the variables \"genre\", \"dur\" and \"bpm\" will be utilized. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbpm_pop <- top10s%>%ggplot(aes(x=bpm,y=pop))+geom_point()+ggtitle(\"BPM/Popularity\")+theme_minimal()+geom_smooth(se=FALSE)\nbpm_pop\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$bpm, top10s$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02314881\n```\n:::\n\n```{.r .cell-code}\ndur_pop <- top10s%>%ggplot(aes(x=dur,y=pop))+geom_point()+ggtitle(\"Duration/Popularity\")+theme_minimal()+geom_smooth(se=FALSE)\ndur_pop\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$dur, top10s$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1056947\n```\n:::\n\n```{.r .cell-code}\ngenre_pop <- top10s%>%ggplot(aes(x=variable_1,y=pop))+geom_point()+ggtitle(\"Genre/Popularity\")+theme_minimal()+geom_smooth(se=FALSE)\ngenre_pop\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 0.945\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 2.055\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 4.4549e-16\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: zero-width neighborhood. make span bigger\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Computation failed in `stat_smooth()`\nCaused by error in `predLoess()`:\n! NA/NaN/Inf in foreign function call (arg 5)\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(top10s$variable_1, top10s$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.01021489\n```\n:::\n:::\n\n\n# Customize Variable Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_genre <- lm(pop ~ genre, data = top10s)\n\nmodel_dur <- lm(pop ~ dur, data = top10s)\n\nmodel_1 <- lm(pop ~ variable_1 + variable_2, data = top10s) #multiple regression model\nsummary(model_1)$coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Estimate Std. Error    t value     Pr(>|t|)\n(Intercept) 76.94574192 4.18664674 18.3788475 4.801203e-60\nvariable_1  -0.14312546 0.41598167 -0.3440667 7.309181e-01\nvariable_2  -0.04503152 0.01732417 -2.5993458 9.572657e-03\n```\n:::\n\n```{.r .cell-code}\nmodel_2 <- lm(pop ~ log(variable_1) + log(variable_2), data = top10s) # log-linear model\nsummary(model_2)$coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Estimate Std. Error    t value     Pr(>|t|)\n(Intercept)     124.1855261  22.308875  5.5666423 3.938166e-08\nlog(variable_1)  -0.3867623   1.527494 -0.2532006 8.002009e-01\nlog(variable_2) -10.6205119   4.109617 -2.5843067 9.995379e-03\n```\n:::\n\n```{.r .cell-code}\nmodel_3 <- lm(pop ~ I(variable_1) + I(variable_2) + I(variable_1^2) + I(variable_2^2) + I(variable_1^3) + I(variable_2^3), data = top10s) # high order polynomial \nsummary(model_3)$coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Estimate   Std. Error    t value  Pr(>|t|)\n(Intercept)      6.348489e+01 5.489305e+01  1.1565198 0.2479375\nI(variable_1)   -2.408607e+00 2.932493e+00 -0.8213513 0.4117785\nI(variable_2)    1.506765e-01 6.501551e-01  0.2317547 0.8168091\nI(variable_1^2)  7.025044e-01 6.774892e-01  1.0369234 0.3001971\nI(variable_2^2) -8.068174e-04 2.486779e-03 -0.3244427 0.7457181\nI(variable_1^3) -4.945496e-02 4.340270e-02 -1.1394442 0.2549811\nI(variable_2^3)  1.060373e-06 3.078065e-06  0.3444935 0.7305982\n```\n:::\n:::\n\n\n\n# Plot Observations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Attempting again to omit NA values\n\ntop10s <- na.omit(top10s)\ntop10s$genre <- na.omit(top10s$genre)\nvariable_1 <- na.omit(variable_1)\nvariable_2 <- na.omit(variable_2)\nmodel_1 <- na.omit(model_1)\nmodel_2 <- na.omit(model_2)\nmodel_3 <- na.omit(model_3)\n\ndata_for_plot <- data.frame(variable_1, variable_2)\ndata_for_plot <- na.omit(data_for_plot)\n```\n:::\n\n\n## *Model 1:* \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Plotting the following observations- Multiple Regression Model\n\nintercept_1 <- coef(model_1)[\"(Intercept)\"]\ncoef_variable_1 <- coef(model_1)[\"variable_1\"]\ncoef_variable_2 <- coef(model_1)[\"variable_2\"]\n\npredicted_pop_1 <- intercept_1 + coef_variable_1 * top10s$variable_1 +\n                 coef_variable_2 * top10s$variable_2\n\nggplot(top10s, aes(x = genre, y = pop)) +\ngeom_point() +\ngeom_line(aes(x = variable_1, y = predicted_pop_1), color = \"red\", size = 3) +\ngeom_smooth(method = \"lm\", color = \"blue\", se = FALSE) +\n  labs(x = \"Genre\", y = \"Popularity\") +\n     theme_bw() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(top10s, aes(x = dur, y = pop)) +\n  geom_point() +\n  geom_line(aes(x = variable_2, y = predicted_pop_1), color = \"red\", size = 3) +\n  geom_smooth(method = \"lm\", color = \"blue\", se = FALSE) +\n  labs(x = \"Duration\", y = \"Popularity\") +\n     theme_bw() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n\n\n## *Model 2:*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotting the following observations- OLS Equation\n\nintercept_ols <- coef(model_2)[\"(Intercept)\"]\ncoef_variable_1 <- coef(model_2)[\"variable_1\"]\ncoef_variable_2 <- coef(model_2)[\"variable_2\"]\n\npredicted_pop_ols <- intercept_ols + coef_variable_1 * top10s$variable_1 + coef_variable_2 * top10s$variable_2\nna.rm = TRUE\n\nggplot(top10s, aes(x = genre, y = pop)) +\n  geom_point(pch = 20, col = \"green\", size = 2.5) +\n  geom_line(aes(x = variable_1, y = fitted(model_2)), col = \"pink\", lwd = 2) +\n  labs(x = \"Genre\", y = \"Popularity\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(top10s, aes(x = dur, y = pop)) +\n  geom_point(pch = 20, col = \"green\", size = 2.5) +\n  geom_line(aes(x = variable_2, y = fitted(model_2)), col = \"pink\", lwd = 2) +\n  labs(x = \"Duration\", y = \"Popularity\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\n## *Model 3:*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotting the following observations- High Order Polynomial\n\ntop10s$predicted_pop <- predict(model_3, newdata = top10s)\n\nggplot(top10s, aes(x = genre, y = pop)) +\n  geom_point() +\n  geom_line(aes(x = variable_1, y = predicted_pop), color = \"maroon\", size = 1) +\n  labs(x = \"Genre\", y = \"Popularity\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(top10s, aes(x = dur, y = pop)) +\n  geom_point() +\n  geom_line(aes(x = variable_2, y = predicted_pop), color = \"maroon\", size = 1) +\n  labs(x = \"Duration\", y = \"Popularity\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](KruzlicClass_Project2_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n:::\n\n\n# Finding the Best Model Specifications\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating multiple specifications to find best model\n\ntop10s_mod1 <- lm(pop ~ variable_1 + I(variable_1^2) + I(variable_1^3), data = top10s)\n  \ntop10s_mod2 <- lm(pop ~ variable_2 + I(variable_2^2) + I(variable_2^3), data = top10s)\n  \ntop10s_mod3 <- lm(pop ~ variable_1 + variable_2 + variable_3, data = top10s) # exclude from future manipulations\n  \ntop10s_mod4 <- lm(pop ~ variable_1 + variable_2 + bpm, data = top10s)\n```\n:::\n\n\n### *Checking for multicollinearity in the following models:*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Attempting to mitigate multicollinearity in the previous models\n\ncorrelation_matrix <- cor(top10s[, c(\"variable_1\", \"variable_2\")])\nprint(correlation_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            variable_1  variable_2\nvariable_1  1.00000000 -0.03618429\nvariable_2 -0.03618429  1.00000000\n```\n:::\n\n```{.r .cell-code}\n### correlation value of -0.03618429 suggests that the variables are not strongly correlated.\n\nvif_results_1 <- vif(model_1)\nvif_results_2 <- vif(model_2)\nvif_results_3 <- vif(model_3)\nprint(vif_results_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvariable_1 variable_2 \n  1.001311   1.001311 \n```\n:::\n\n```{.r .cell-code}\nprint(vif_results_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlog(variable_1) log(variable_2) \n       1.000437        1.000437 \n```\n:::\n\n```{.r .cell-code}\nprint(vif_results_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  I(variable_1)   I(variable_2) I(variable_1^2) I(variable_2^2) I(variable_1^3) \n       49.56246      1404.61111       359.86366      5140.77194       167.87602 \nI(variable_2^3) \n     1247.37702 \n```\n:::\n\n```{.r .cell-code}\n### very high variance inflation factor (VIF) for model_3, the higher order polynomial equation, signifying multicollinearity in the model. \n\ntolerance_values_1 <- 1 / vif_results_1\ntolerance_values_2 <- 1 / vif_results_2\ntolerance_values_3 <- 1 / vif_results_3\n\nprint(tolerance_values_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvariable_1 variable_2 \n 0.9986907  0.9986907 \n```\n:::\n\n```{.r .cell-code}\nprint(tolerance_values_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlog(variable_1) log(variable_2) \n      0.9995633       0.9995633 \n```\n:::\n\n```{.r .cell-code}\nprint(tolerance_values_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  I(variable_1)   I(variable_2) I(variable_1^2) I(variable_2^2) I(variable_1^3) \n   0.0201765606    0.0007119408    0.0027788302    0.0001945233    0.0059567770 \nI(variable_2^3) \n   0.0008016822 \n```\n:::\n\n```{.r .cell-code}\n### very low (close to 0) score for model_3, signifying multicollinearity in the model. \n\n# Attempting to mitigate multicollinearity in the newest models\n\ncorrelation_matrix <- cor(top10s[, c(\"variable_1\", \"variable_2\", \"pop\", \"bpm\")])\nprint(correlation_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            variable_1  variable_2         pop         bpm\nvariable_1  1.00000000 -0.03618429 -0.01021489  0.06691989\nvariable_2 -0.03618429  1.00000000 -0.10569472 -0.03262715\npop        -0.01021489 -0.10569472  1.00000000  0.02314881\nbpm         0.06691989 -0.03262715  0.02314881  1.00000000\n```\n:::\n\n```{.r .cell-code}\n### correlation value less than 1 suggest that the variables are not strongly correlated.\n```\n:::\n\n\n## Obtaining Robust Standard Errors and Stargazer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nse_1 <- sqrt(diag(vcovHC(top10s_mod1, type = \"HC1\")))\nse_2 <- sqrt(diag(vcovHC(top10s_mod2, type = \"HC1\")))\nse_3 <- sqrt(diag(vcovHC(top10s_mod3, type = \"HC1\"))) # 'Y' value of 'pop' within the dataset 'top10s' equates to the third variable and therefore, cannot be used. \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n```\n:::\n\n```{.r .cell-code}\nse_4 <- sqrt(diag(vcovHC(top10s_mod4, type = \"HC1\")))\n\nrob_se <- list(sqrt(diag(vcovHC(top10s_mod1, type = \"HC1\"))),\n sqrt(diag(vcovHC(top10s_mod2, type = \"HC1\"))),\n sqrt(diag(vcovHC(top10s_mod4, type = \"HC1\"))))\n\nstargazer(top10s_mod1, top10s_mod2, top10s_mod4,\ntitle = \"New Models\",\ntype = \"latex\",\ndigits = 3,\nheader = FALSE,\nse = rob_se,\nobject.names = TRUE,\nmodel.numbers = FALSE,\ncolumn.labels = c(\"(i)\", \"(ii)\", \"(iiii)\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\\begin{table}[!htbp] \\centering \n  \\caption{New Models} \n  \\label{} \n\\begin{tabular}{@{\\extracolsep{5pt}}lccc} \n\\\\[-1.8ex]\\hline \n\\hline \\\\[-1.8ex] \n & \\multicolumn{3}{c}{\\textit{Dependent variable:}} \\\\ \n\\cline{2-4} \n\\\\[-1.8ex] & \\multicolumn{3}{c}{pop} \\\\ \n & (i) & (ii) & (iiii) \\\\ \n\\\\[-1.8ex] & top10s_mod1 & top10s_mod2 & top10s_mod4\\\\ \n\\hline \\\\[-1.8ex] \n variable\\_1 & $-$1.938 &  & $-$0.157 \\\\ \n  & (3.354) &  & (0.535) \\\\ \n  & & & \\\\ \n I(variable\\_1$\\hat{\\mkern6mu}$2) & 0.574 &  &  \\\\ \n  & (0.794) &  &  \\\\ \n  & & & \\\\ \n I(variable\\_1$\\hat{\\mkern6mu}$3) & $-$0.041 &  &  \\\\ \n  & (0.054) &  &  \\\\ \n  & & & \\\\ \n variable\\_2 &  & 0.135 & $-$0.045$^{***}$ \\\\ \n  &  & (0.473) & (0.015) \\\\ \n  & & & \\\\ \n I(variable\\_2$\\hat{\\mkern6mu}$2) &  & $-$0.001 &  \\\\ \n  &  & (0.002) &  \\\\ \n  & & & \\\\ \n I(variable\\_2$\\hat{\\mkern6mu}$3) &  & 0.00000 &  \\\\ \n  &  & (0.00000) &  \\\\ \n  & & & \\\\ \n bpm &  &  & 0.012 \\\\ \n  &  &  & (0.033) \\\\ \n  & & & \\\\ \n Constant & 68.098$^{***}$ & 62.304 & 75.491$^{***}$ \\\\ \n  & (4.824) & (40.853) & (5.380) \\\\ \n  & & & \\\\ \n\\hline \\\\[-1.8ex] \nObservations & 596 & 596 & 596 \\\\ \nR$^{2}$ & 0.002 & 0.011 & 0.012 \\\\ \nAdjusted R$^{2}$ & $-$0.003 & 0.006 & 0.007 \\\\ \nResidual Std. Error (df = 592) & 14.554 & 14.484 & 14.481 \\\\ \nF Statistic (df = 3; 592) & 0.358 & 2.274$^{*}$ & 2.356$^{*}$ \\\\ \n\\hline \n\\hline \\\\[-1.8ex] \n\\textit{Note:}  & \\multicolumn{3}{r}{$^{*}$p$<$0.1; $^{**}$p$<$0.05; $^{***}$p$<$0.01} \\\\ \n\\end{tabular} \n\\end{table} \n```\n:::\n\n```{.r .cell-code}\nstargazer(top10s_mod1, top10s_mod2, top10s_mod4,\n          title = \"Regression Models\",\n          type = \"text\",\n          header = TRUE,\n          digits = 4, \n          se = rob_se,\n          column.labels = c(\"(i)\", \"(ii)\", \"(iiii)\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nRegression Models\n===============================================================\n                                     Dependent variable:       \n                               --------------------------------\n                                             pop               \n                                  (i)        (ii)      (iiii)  \n                                  (1)        (2)        (3)    \n---------------------------------------------------------------\nvariable_1                      -1.9383               -0.1570  \n                                (3.3536)              (0.5349) \n                                                               \nI(variable_12)                   0.5736                        \n                                (0.7939)                       \n                                                               \nI(variable_13)                  -0.0405                        \n                                (0.0536)                       \n                                                               \nvariable_2                                  0.1348   -0.0448***\n                                           (0.4729)   (0.0155) \n                                                               \nI(variable_22)                             -0.0007             \n                                           (0.0018)            \n                                                               \nI(variable_23)                             0.000001            \n                                          (0.000002)           \n                                                               \nbpm                                                    0.0121  \n                                                      (0.0334) \n                                                               \nConstant                       68.0979***  62.3041   75.4906***\n                                (4.8238)  (40.8534)   (5.3800) \n                                                               \n---------------------------------------------------------------\nObservations                      596        596        596    \nR2                               0.0018     0.0114     0.0118  \nAdjusted R2                     -0.0032     0.0064     0.0068  \nResidual Std. Error (df = 592)  14.5540    14.4840    14.4810  \nF Statistic (df = 3; 592)        0.3577    2.2738*    2.3556*  \n===============================================================\nNote:                               *p<0.1; **p<0.05; ***p<0.01\n```\n:::\n:::\n\n\n## Linear Hypothesis Testing\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoeftest(top10s_mod1, vcov. = vcovHC, type = \"HC1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nt test of coefficients:\n\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     68.097924   4.823789 14.1171   <2e-16 ***\nvariable_1      -1.938256   3.353584 -0.5780   0.5635    \nI(variable_1^2)  0.573615   0.793874  0.7226   0.4702    \nI(variable_1^3) -0.040503   0.053563 -0.7562   0.4498    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\ncoeftest(top10s_mod2, vcov. = vcovHC, type = \"HC1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nt test of coefficients:\n\n                   Estimate  Std. Error t value Pr(>|t|)\n(Intercept)      6.2304e+01  4.0853e+01  1.5251   0.1278\nvariable_2       1.3475e-01  4.7288e-01  0.2850   0.7758\nI(variable_2^2) -7.3572e-04  1.7722e-03 -0.4152   0.6782\nI(variable_2^3)  9.6901e-07  2.1268e-06  0.4556   0.6488\n```\n:::\n\n```{.r .cell-code}\ncoeftest(top10s_mod4, vcov. = vcovHC, type = \"HC1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) 75.490554   5.379970 14.0318 < 2.2e-16 ***\nvariable_1  -0.157023   0.534907 -0.2936  0.769204    \nvariable_2  -0.044766   0.015478 -2.8921  0.003967 ** \nbpm          0.012119   0.033433  0.3625  0.717123    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nlinearHypothesis(top10s_mod1,\n   c(\"variable_1 = 0\", \"I(variable_1^2) = 0\", \"I(variable_1^3) = 0\"),\n   vcov. = vcovHC(top10s_mod1, type = \"HC1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\nvariable_1 = 0\nI(variable_1^2) = 0\nI(variable_1^3) = 0\n\nModel 1: restricted model\nModel 2: pop ~ variable_1 + I(variable_1^2) + I(variable_1^3)\n\nNote: Coefficient covariance matrix supplied.\n\n  Res.Df Df      F Pr(>F)\n1    595                 \n2    592  3 0.1985 0.8974\n```\n:::\n\n```{.r .cell-code}\nlinearHypothesis(top10s_mod2,\n   c(\"variable_2 = 0\", \"I(variable_2^2) = 0\", \"I(variable_2^3) = 0\"),\n   vcov. = vcovHC(top10s_mod2, type = \"HC1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\nvariable_2 = 0\nI(variable_2^2) = 0\nI(variable_2^3) = 0\n\nModel 1: restricted model\nModel 2: pop ~ variable_2 + I(variable_2^2) + I(variable_2^3)\n\nNote: Coefficient covariance matrix supplied.\n\n  Res.Df Df      F Pr(>F)  \n1    595                   \n2    592  3 3.6335 0.0128 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nlinearHypothesis(top10s_mod4,\n   c(\"variable_1 = 0\", \"variable_2 = 0\", \"bpm = 0\"),\n   vcov. = vcovHC(top10s_mod4, type = \"HC1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\nvariable_1 = 0\nvariable_2 = 0\nbpm = 0\n\nModel 1: restricted model\nModel 2: pop ~ variable_1 + variable_2 + bpm\n\nNote: Coefficient covariance matrix supplied.\n\n  Res.Df Df      F  Pr(>F)  \n1    595                    \n2    592  3 2.8018 0.03925 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n# Written explanations: What do we see here? \n\nA linear model works well with variables that have a directly linear relationship between one another. It can best represent a simple relationship that falls within a straight line, such as the relationship between hours worked and money earned. The 'line of best fit' in the case of Spotify chart data would not be best utilized by a linear relationship, as there is too many factors to consider and too many complex patterns that would be wrongfully ignored in a linear example.\n\nThe benefit of non-linear models allows for more flexibility within the growth patterns and the visualizations. These non-linear models in my example, consisting both of polynomial regression and OLS models, provide a more accurate fit to the chart data and to the patterns we are able to see. In the case of model_2, the relationship between duration and popularity, there seems to be a negative relationship as shown by the pink line. From this plot, we are able to see the relationship between duration and popularity, in which the most popular songs (rated on a scale of 0 to 100) have a duration that is under 3 minutes. As the duration increases, the chance of the song charting decreases. \n\n# Citations\n\nHenrique, L. (2019, December 26). Top Spotify songs from 2010-2019 - by Year. Kaggle. https://www.kaggle.com/datasets/leonardopena/top-spotify-songs-from-20102019-by-year \n\nMermovich, A. (2023, April 28). Spotify Hits (2010-2019) Analytics\n\nHlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables.\nR package version 5.2.3. https://CRAN.R-project.org/package=stargazer \n",
    "supporting": [
      "KruzlicClass_Project2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}